[
    "Turing Oyunu",
    "Taş Kağıt Makas",
    "Palindrom",
    "XOX",
    "Satranç",
    "Labirent",
    "Savaş meydanı",
    "Sudoku",
    "Matematik",
    "Gezgin",
    "Evrensel Turing Makinesi",
    "Durum",
    "Sembol",
    "Sonraki Durum",
    "Sonraki Sembol",
    "Adım",
    "İlk Durum:",
    "Talimatlar bulunamadı",
    "Her talimat yeni bir satıra yazılmalı ve boşluklarla ayrılmış beş elemandan oluşmalıdır",
    "Başlangıç durumu bulunamadı",
    "Adım sembolü yalnızca U (yukarı), D (aşağı), L (sol), R (sağ) ve N (yok) değerlerini alabilir",
    "Durum adları 10 karakter uzunluğunu geçmemelidir",
    "Alandaki semboller 2 karakter uzunluğunu geçmemelidir",
    "Kabul eden durum bulunamadı",
    "Testler yüklenemiyor, talimatlar hata içeriyor",
    "Testleri başlat",
    "Testleri duraklat",
    "Testleri sürdür",
    "Testleri sıfırla",
    "Tüm testler yapılıyor ...",
    "Testler başarılı:",
    "Testler başarısız:",
    "Test",
    "Sonraki",
    "Sıfırla",
    "Mevcut durum",
    "Sonraki talimat",
    "Sonuç",
    "Beklenen",
    "Kabul edildi",
    "Red edildi",
    "Devam ediyor",
    "Ana Sayfa",
    "Karanlık Arayüz",
    "Aydınlık Arayüz",
    "Dil",
    "Yardım Sayfası",
    "Talimatlar",
    "Düzenleyici",
    "Örnek Girdi",
    "# Turing Oyunu Hakkında\nTuring Oyunu, Turing makineleri tasarlamanızın istendiği eğlenceli bir zeka oyunudur. Turing makineleri, bir satranç oyununun bitip bitmediğini veya bir labirentin çözülebilir olup olmadığını belirleyen kuramsal makinelerdir. Oyun Alan Turing'in hesaplama teorisi üzerindeki çalışmalarından ilham alınarak eğlenceli bir proje olarak hayata geçirildi.\n\n# Nasıl oynanır\nOyunun amacı, bir Turing makinesinin nasıl çalışacağını açıklayan aşağıdaki gibi bir tablo elde etmektir. Hazırlık bittiğinde tablonuzu gönderir ve tasarlanan makinenizin tüm testleri geçip geçmediğini görürsünüz.",
    "Talimatlar tablosu, her biri 5 kelimeden oluşan satırlardan oluşur. Bu satırlarda neler yazdığı hakkında konuşmadan önce, makinenin kendisi hakkında konuşalım.\n\n# Turing Makinesi nedir\nTuring makinesi her zaman sonsuz bir hücre alanında bulunan varsayımsal bir makinedir. Bazı hücrelerin üzerinde \"A\" veya \"2\" gibi bir sembol bulunabilir. Turing makinesi, bulunduğu karedeki sembolü *okuyabilir*. Yan hücrelerdeki sembolleri okuyamaz; sembolü okumak için o hücreye *hareket etmesi* gerekir.",
    "Benzer şekilde Turing makinesi altındaki sembolü *değiştirebilir*. Örneğin, \"A\" yı \"B\" ye veya boş bir hücreyi \"C\" olarak veya \"C\" yi boş bir hücreye değiştirebilir.",
    "Turing makinesi bir seferde sadece dört yönde hareket edebilir: sola, sağa, yukarı ve aşağı. Ayrıca bir yere hareket etmeyecek şekilde de tasarlanabilir.",
    "Özetle, Turing makinesi okuyabilir, yazabilir ve hareket edebilir. Hepsi bu. Ancak Turing makinesinin nasıl davranacağını belirleyen nedir? Makine istediği gibi davranabilir mi?\n\n# Cevap hayır\nBir Turing makinesinin nasıl davranacağına karar veren şey *talimatlar* tablosudur. Bunlardan birini analiz edelim:",
    "Bu talimat, \"Makine A *durum*undaysa ve altındaki sembol 0 ise, durumu B olarak değiştir. 0'ı 1 yap ve sağa bir adım hareket et.\"\n\n# Durumlar\nTuring makineleri her zaman bir durumdadır. Bu, insanların her zaman duygusal bir durumda olmalarına benzer: mutlu, kızgın, üzgün, heyecanlı, rahat. Farklı durumlardaki insanlar farklı davranacaklardır. Örneğin, öfkeli bir kişi fazla konuşmaz; heyecanlı bir kişi daha hızlı nefes alır. Benzer şekilde, Turing makineleri \"A sembolü bulana kadar sağa hareket etme\" durumunda veya \"sola hareket edip her A'yı B'ye değiştirme\" durumunda olabilir.\n\n# Bir örnek\nTuring makinemizin aşağıdaki talimatlara sahip olduğunu ve aşağıdaki alana yerleştirildiğini varsayalım:",
    "Ayrıca, makinemizin şu anda A durumunda olduğunu varsayalım. Makine şu şekilde çalışacaktır:\n\n1. Sırayla tüm talimatları okuyacak:\n  - \"Durum B ve sembol 1 ise: durumu A yap; sembolü 2 yap ve sağa hareket et.\"\n  - \"Durum A ve sembol 2 ise: durumu B yap; sembolü 4 yap ve yukarı git.\"\n  - \"Durum A ve sembol 3 ise: durumu C yap; sembolü 1 yap ve sola git.\"\n\n2. Hangisinin uygulanabilir olduğuna bak:\n  - Makine B durumunda olmadığı için ilk talimat uygulanamaz.\n  - İkinci talimat uygulanamaz, çünkü makinenin altındaki sembol 2 değildir.\n  - Her iki koşul da sağlandığından üçüncü talimat uygulanabilir.\n\n3. Talimatı uygula:\n  - Durumu C olarak değiştir.\n  - Sembolü 1 olarak değiştir.\n  - Bir hücre sola git.\n\n4. Tekrarla.\n\n# Bir egzersiz\nŞimdi bir X bulana kadar sağa doğru hareket edecek bir makine tasarlayalım ve onu bulduğunda daha fazla hareket etmesin.",
    "Bu durumda iki durum yeterlidir:\n\n1. **X arıyor**\n2. **X buldu**\n\nArdından, makinenin her durumda ne yapması gerektiğini düşünelim:\n\n1. **X arıyor** - Bir X bulana kadar sağa hareket et.\n2. **X buldu** - Hep yerinde dur.\n\nŞimdi bunları yeniden ifade edelim:\n\n1. Alttaki sembol X değilse, sağa hareket et ve aramaya devam et.\n2. Alttaki sembol X ise, hiçbir yere hareket etme ve aramayı bırak.\n\nİlk cümleye dönelim ve onu bir talimata çevirmeye çalışalım:\n\n- Bu cümle yalnızca makine arama yaparken (\"X arıyor\" iken) ve altındaki sembol X olmadığında geçerlidir.\n- Alanın X'in bulunduğu yer dışındaki her yerde boş olduğunu varsayarsak, bu cümle yalnızca makinenin altındaki sembol *boş* sembolü iken geçerlidir diyebiliriz.\n- Bir sonraki durum ne olacak? \"aramaya devam et” dediğinden, durumun değişmemesi gerektiğini anlıyoruz.\n- Sembol neye dönüşecek? Sembolleri değiştirmemiz istenmediği için, bunları boş semboller olarak bırakacağız.\n\nŞimdi, cümleyi resmi bir talimat haline getirmeye hazırız.",
    "Unutulmaması gereken birkaç nokta:\n- Resmi durum adlarında boşluk kullanamayız, çünkü talimatlar boşluklarla ayrılmış 5 kelimeden oluşmalıdır. Böylece biz \"X arıyor\" ifadesini \"XA\" olarak kısalttık.\n- Boş sembolleri hiçbir şey yazmadan temsil edemeyiz, çünkü uzunluk yine 5 olmayacaktır. Kural olarak, boş hücreleri _ ile temsil edeceğiz.\n- Kural olarak \"sağ\" için R, \"sol\" için L, \"yukarı\" için U, \"aşağı\" için D, \"hiçbiri\" için N kullanılır.\n\nİkinci cümle aşağıdaki gibi yeniden ifade edilebilir:\n\n- X arıyorsan ve altındaki X ise, X'i buldun. Sembolü değiştirme ve hareket etme.",
    "Henüz işimiz bitmedi. Makine X'i bulduğunda ve durum artık XB ise ne olacak? Durum XB iken ne yapacağımızı belirten talimatlarımız yok. Bir tane yazalım.",
    "Tasarım bitti gibi görünüyor! Tebrikler.\n\n# Durmak ya da Durmamak\nAslında, önceki egzersizdeki Turing makinesinin tasarımı hatalı. Bakalım neden:",
    "Bu makine, X'i bulduğunda üçüncü talimatı tekrar tekrar yürütmeye devam edecektir. Bu davranışa *döngü* denir ve genelde istenmeyen bir davranıştır. Bu, bilgisayardaki oyunların takılmasına benzer. Bu durumda tek seçenek, bilgisayarı programı durdurmaya zorlamaktır. Bunun yerine istediğimiz takılmayan bir program. Aynı şekilde, Turing makinemizin asla döngüye girmesini istemeyiz; işini bitirdikten sonra *durmasını* istiyoruz.\n\nDurdurma iki şekilde gerçekleştirilebilir:\n1. Turing makinesi ACCEPT adlı özel bir duruma geçerse durur. Bu olduğunda, makinenin \"durduğu ve kabul ettiği\" söylenir.\n2. Turing makinesi, herhangi bir anda uygulanabilir bir talimat bulamazsa, kendisini REJECT adlı başka bir özel duruma geçirir ve durur. \"Durup reddettiği\" söylenir.\n\nBuradaki problemlere akademide *karar problemleri* denir: Bir Turing makinesinin sorulara evet / hayır şeklinde cevap verdiği problemler. Örneğin, bu sayı asal bir sayı mı? Evet. Bu oyun bitti mi? Hayır.\n\nKural olarak, makine *kabul ederse*, \"evet\" cevabına karşılık gelir. *Reddederse*, \"hayır\" a karşılık gelir. YA döngüdeyse? Bu, makinenin bir cevap vermediği anlamına gelir.\n\n# Başka bir Egzersiz\nBu sefer, belirli bir sayının çift olup olmadığını söyleyen bir makine tasarlayacağız. Bu cümleden, sayı çiftse Turing makinesinin \"kabul etmesi\", değilse \"reddetmesi\" gerektiğini anlamalısınız. Sayıların alanda nasıl konumlandırılacağını görelim:",
    "Bir sayının çift olup olmadığını nasıl anlarsınız? En basit yöntem son basamağı incelemektir: 0, 2, 4, 6 veya 8 ise, o zaman çifttir. Aksi takdirde tektir. Bu nedenle, makinemizin son basamağı incelemek için sayının sağ ucuna geçmesi gerekiyor. Makine altındaki sembolün uç olup olmadığını nasıl bilebilir? Alttaki sembol bir sayı değil de boş ise, bu, son basamağın boş sembolünün solunda olduğunu gösterir.\n\nŞimdi talimatları resmi olmayan bir şekilde yazalım:\n\n1. Başla\n2. Boş sembolü görene kadar sağa git.\n3. Bir adım sola git.\n4. Sembol 0, 2, 4, 6 veya 8 ise kabul et.\n5. Aksi takdirde reddet.\n\nMalumatlardan makinenin içinde olabileceği durumların listesini yazalım:\n\n1. Sona daha ulaşmadı\n2. Sona ulaştı\n3. Bir adım sola taşındı\n\nOnları kısaltalım:\n\n1. SDU\n2. SU\n3. BAST\n\nBurada, ilk durumun SDU olduğunu aklımızda tutmalıyız. Bunu belirtmeniz gerekir. Şimdi talimatları neredeyse resmi bir formda yazalım:",
    "Yakından bakarsanız, beşinci talimatın gereksiz olduğunu fark edersiniz: Durum BAST ise ve sembol çift değilse, bu talimatların hiçbiri geçerli olmaz. Dolayısıyla, makine REJECT durumuna geçer.\n\nDikkat çekilmesi gereken başka bir şey: ikinci ve üçüncü talimatlar tek bir taneye indirilebilir. Burada SU durumu gereksizdir. Bakalım ne elde ettik:",
    "Geriye kalan tek şey \"rakam\" yerine 0-9, \"çift\" yerine çift sayı koymaktır. Nihai tablomuz:",
    "Makinemizi 999 ve 1000 sayılarıyla test edelim:",
    "# Özet\n- Turing makinelerinin çalışması için bir talimat tablosu gerekir\n- Turing makineleri hareket edebilir, sembolleri okuyabilir ve değiştirebilir.\n- Turing makineleri mevcut durumlarına ve sembollere bakarak durumlarını değiştirebilir.\n- Turing makineleri günün sonunda ya kabul ya da reddetmelidir.\n- Döngü kötüdür.\n\n# Ilginç gerçekler\n- Telefonlarınız ve bilgisayarlarınız birer Turing makinesidir: talimatları uygulayabilirler. Tasarımınızı bu uygulama test ediyor!\n- Turing makineleri bir bilgisayarı \"bilgisayar\" yapan şeyi *tanımlar*: bir sembol alanına (RAM) sahip olmak ve talimatları yürütebilmek (CPU).\n- *Çözülebilir* bütün problemler Turing makinesiyle *çözülebilir*.\n- Tüm çözülebilir sorunları çözebileceğini iddia eden herhangi bir programlama dili, bir Turing makine simülatörü inşa ederek bunu kanıtlayabilir.\n- Bu tür dillere Turing-complete adı verilir.\n\n\n\n# Son sözler\nTuring makineleri (ve arkadaşları) hakkında daha fazla bilgi edinmek istiyorsanız, Hesaplama Teorisi, Biçimsel Diller ve Otomata ders kitabını bulun.\n\nBu uygulamada bir hata bulursanız veya farklı bir dile çevirerek katkıda bulunmak istiyorsanız, projenin [resmi deposuna](https://github.com/denizbasgoren/turing) gidin ve bir konu başlığı açın.",
    "XA",
    "XB",
    "SDU",
    "SU",
    "BAST",
    "rakam",
    "çift",
    "tek",
    "# Amaç\nSiz ve bir arkadaşınız taş, makas ve kağıt oyunu oynuyorsunuz. Oyunu kazanıp kazanmadığınızı belirleyin.\n\n# Semboller\nR = taş, S = makas, P = kağıt.\n\n# Kurallar\n- Taş makası kırar\n- Makas kağıdı keser\n- Kağıt taşı sarar\n\n# Dizilim\nTuring makinesi başlangıçta sembolünüzün üzerinde durur. Sağda arkadaşınızın sembolü durur.",
    "# Amaç\nVerilen sözcüğün bir palindrom olup olmadığını belirleyin. Bir kelime soldan sağa ve sağdan sola aynı şekilde okunuyorsa bir polindromdur.\n\n# Semboller\nKelimelerin harfleri yalnızca Y,E,A harflerinden oluşuyor.\n\n# Dizilim\nTuring makinesi kelimenin en soldaki harfine yerleştirilir.",
    "# Amaç\nVerilen XOX oyununun berabere bitip bitmediğini belirleyin.\n\n# Semboller\nBir taraf X, diğer taraf O oynar. Kalan boş hücre kalmadığını varsayabilirsiniz.\n\n# Kurallar\nEğer oyunculardan hiçbiri oyunu kazanamazsa oyun berabere biter. Oyuncular 4 şekilde kazanabilir:\n- Bir sütunun tüm satırlarını sembolleriyle doldurarak\n- Bir satırın tüm sütunlarını sembolleriyle doldurarak\n- Ana çaprazı doldurarak (sol üst köşeden sağ alt köşeye)\n- Karşı çaprazı doldurarak (sağ üst köşeden sol alt köşeye)\n\n# Dizilim\nKare 3x3, 4x4 veya daha büyük olabilir. Turing makinesi daima sol üst köşeye yerleştirilir.",
    "# Amaç\nBelirli bir satranç oyununda şah olup olmadığınızı (şah saldırı altında mı) belirleyin.\n\n# Semboller\nR = kale, N = at, B = fil, Q = vezir, K = şah, P = piyon, . = boş. Büyük harfler beyazın taşlarını, küçük harfler siyahın taşlarını temsil eder.\n\n# Kurallar\n Siz beyazlarla oynuyorsunuz.\n\n# Dizilim\n8x8 satranç tahtası, beyazlar tarafından görüldüğü gibi sahaya yerleştirilir (a1 hücresi sol alt köşedir). Turing makinesi sol üst köşeye yerleştirilir.",
    "# Amaç\nVerilen labirentin çözülebilir olup olmadığını, yani çıkışının ulaşılabilir olup olmadığını belirleyin.\n\n# Semboller\n_ = Boş yollar, O = Duvarlar, X = Çıkış.\n\n# Dizilim\nLabirent dikdörtgen şeklindedir ve boyutları bilinmemektedir. Sağ alt köşede X ile işaretlenmiş bir çıkış bulunur. Turing makinesi sol üst köşeye yerleştirilir.",
    "# Amaç\nİki imparatorluğun askerleri savaş alanında karşı karşıya gelir. Ordunuzda düşmandan daha fazla asker olup olmadığını belirleyin.\n\n# Semboller\nY = ordunuz, E = düşman ordusu. Boş hücre olmadığını varsayın.\n\n# Dizilim\nSavaş alanı, boyutları bilinmeyen bir dikdörtgendir. Turing makinesi sol üst köşeye yerleştirilmiştir.",
    "# Amaç\nVerilen Sudoku bulmacasının doğru bir şekilde çözülüp çözülmediğini belirleyin.\n\n# Semboller\n 1-4 arası rakamlar mevcuttur. Boş hücreler \".\" ile gösterilmiştir. Dört 2x2 bölümler _ ile ayrılmıştır.\n\n# Kurallar\n- 4x4 tablonun her satırı, her biri yalnızca bir kez kullanılan 1-4 rakamlardan oluşur.\n- 4x4 tablosunun her sütunu, her biri yalnızca bir kez kullanılan 1-4 rakamlardan oluşur.\n- Dokuz 2x2 kare bölüm, her biri yalnızca bir kez kullanılan 1-4 rakamlardan oluşur. Hücrelerden bazıları boş bırakılmış olabilir.\n\n# Dizilim\nTuring makinesi sol üst köşeye yerleştirilir.",
    "# Amaç\nİki ikili sayının çarpımının doğru verilip verilmediğini belirleyin.\n\n# Semboller\nSadece 0,1 rakamları mevcuttur.\n\n# Kısıtlamalar\nSayılar en fazla 4 basamak uzunluğunda olabilir. Böylece, çarpımları en fazla 8 basamak uzunluğunda olacaktır.\n\n# Dizilim\nSayıların tümü sola hizalıdır ve birbirinin üzerinde durur. İlk iki satırda çarpılacak sayılar durur ve üçüncü satırdaki sayı çarpımdır.",
    "# Amaç\nBir gezgin yeryüzündeki dört krallığın dördünü de yürüyerek gezmek ister. Krallıklar: Ateş, Su, Hava, Toprak. Tüm krallıkları ziyaret etmenin mümkün olup olmadığını belirleyin. Yani, 4 krallığı da birbirine bağlayan yolların olup olmadığını belirleyin.\n\n# Semboller\nKrallık adları, F, A, W, E'dir.\n\n# Dizilim\nSembol alanında, rotalar alt alta sıralanır. Her liste elemanı, her biri bir krallığı temsil eden yan yana iki karakterden oluşur. Krallık sırasının önemi yoktur, bir yolda her iki yönde de yürünebilir. Bazı yollar bir krallıktan başlayıp, aynı krallıkta bitebilir.",
    "# Amaç\nVerilen Turing makinesinin verilen girişi kabul edip etmediğini belirleyin. Her zaman durduğunu (sonsuz döngüye girmediğini) varsayın.\n\n# Semboller\nSimüle edilecek olan turing makinesi sadece sağa (R) ve sola (L) hareket edebilir. Alandaki semboller yalnızca _, 0 ve 1 olabilir. Durum adları: a (kabul eden durum), b, i (ilk durum), r (red eden durum).\n\n# Dizilim\nİlk satır, simüle edilecek tek boyutlu Turing makinesinin bandı (alanı). Sembol alanı sonsuz uzunluktadır. Sizin Turing makineniz tam olarak simüle edilecek Turing makinesinin bulunduğu yere, alan üzerine yerleştirilir.\n\nBandın altında sola hizalanmış talimatlar listelenir. Talimatların hepsi 5 karakter uzunluğunda. Elemanların sıralaması bu uygulamadakiyle aynıdır. Tüm karakterler 1 uzunluğunda olduğundan, 5 elemanın bir ayıraçla ayrılması gerekmez."
]